{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('simple-oauth2:access-token');\nconst EXPIRES_AT_PROPERTY_NAME = 'expires_at';\nconst EXPIRES_IN_PROPERTY_NAME = 'expires_in';\nfunction getExpirationDate(expiresIn) {\n  return new Date(Date.now() + Number.parseInt(expiresIn, 10) * 1000);\n}\nfunction parseExpirationDate(expirationDate) {\n  if (expirationDate instanceof Date) {\n    return expirationDate;\n  }\n\n  // UNIX timestamp\n  if (typeof expirationDate === 'number') {\n    return new Date(expirationDate * 1000);\n  }\n\n  // ISO 8601 string\n  return new Date(expirationDate);\n}\nfunction parseToken(token) {\n  const tokenProperties = {};\n  if (EXPIRES_AT_PROPERTY_NAME in token) {\n    tokenProperties[EXPIRES_AT_PROPERTY_NAME] = parseExpirationDate(token[EXPIRES_AT_PROPERTY_NAME]);\n  } else if (EXPIRES_IN_PROPERTY_NAME in token) {\n    tokenProperties[EXPIRES_AT_PROPERTY_NAME] = getExpirationDate(token[EXPIRES_IN_PROPERTY_NAME]);\n  } else {\n    debug('No token expiration property was found. Ignoring date parsing');\n  }\n  return {\n    ...token,\n    ...tokenProperties\n  };\n}\nmodule.exports = {\n  parseToken\n};","map":{"version":3,"names":["debug","require","EXPIRES_AT_PROPERTY_NAME","EXPIRES_IN_PROPERTY_NAME","getExpirationDate","expiresIn","Date","now","Number","parseInt","parseExpirationDate","expirationDate","parseToken","token","tokenProperties","module","exports"],"sources":["C:/Programming/Hearthstone/Hearthstone-Arena-Deck-Builder/hearthstone-app/node_modules/simple-oauth2/lib/access-token-parser.js"],"sourcesContent":["'use strict';\n\nconst debug = require('debug')('simple-oauth2:access-token');\n\nconst EXPIRES_AT_PROPERTY_NAME = 'expires_at';\nconst EXPIRES_IN_PROPERTY_NAME = 'expires_in';\n\nfunction getExpirationDate(expiresIn) {\n  return new Date(Date.now() + Number.parseInt(expiresIn, 10) * 1000);\n}\n\nfunction parseExpirationDate(expirationDate) {\n  if (expirationDate instanceof Date) {\n    return expirationDate;\n  }\n\n  // UNIX timestamp\n  if (typeof expirationDate === 'number') {\n    return new Date(expirationDate * 1000);\n  }\n\n  // ISO 8601 string\n  return new Date(expirationDate);\n}\n\nfunction parseToken(token) {\n  const tokenProperties = {};\n\n  if (EXPIRES_AT_PROPERTY_NAME in token) {\n    tokenProperties[EXPIRES_AT_PROPERTY_NAME] = parseExpirationDate(token[EXPIRES_AT_PROPERTY_NAME]);\n  } else if (EXPIRES_IN_PROPERTY_NAME in token) {\n    tokenProperties[EXPIRES_AT_PROPERTY_NAME] = getExpirationDate(token[EXPIRES_IN_PROPERTY_NAME]);\n  } else {\n    debug('No token expiration property was found. Ignoring date parsing');\n  }\n\n  return {\n    ...token,\n    ...tokenProperties,\n  };\n}\n\nmodule.exports = { parseToken };\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,4BAA4B,CAAC;AAE5D,MAAMC,wBAAwB,GAAG,YAAY;AAC7C,MAAMC,wBAAwB,GAAG,YAAY;AAE7C,SAASC,iBAAiBA,CAACC,SAAS,EAAE;EACpC,OAAO,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGC,MAAM,CAACC,QAAQ,CAACJ,SAAS,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC;AACrE;AAEA,SAASK,mBAAmBA,CAACC,cAAc,EAAE;EAC3C,IAAIA,cAAc,YAAYL,IAAI,EAAE;IAClC,OAAOK,cAAc;EACvB;;EAEA;EACA,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;IACtC,OAAO,IAAIL,IAAI,CAACK,cAAc,GAAG,IAAI,CAAC;EACxC;;EAEA;EACA,OAAO,IAAIL,IAAI,CAACK,cAAc,CAAC;AACjC;AAEA,SAASC,UAAUA,CAACC,KAAK,EAAE;EACzB,MAAMC,eAAe,GAAG,CAAC,CAAC;EAE1B,IAAIZ,wBAAwB,IAAIW,KAAK,EAAE;IACrCC,eAAe,CAACZ,wBAAwB,CAAC,GAAGQ,mBAAmB,CAACG,KAAK,CAACX,wBAAwB,CAAC,CAAC;EAClG,CAAC,MAAM,IAAIC,wBAAwB,IAAIU,KAAK,EAAE;IAC5CC,eAAe,CAACZ,wBAAwB,CAAC,GAAGE,iBAAiB,CAACS,KAAK,CAACV,wBAAwB,CAAC,CAAC;EAChG,CAAC,MAAM;IACLH,KAAK,CAAC,+DAA+D,CAAC;EACxE;EAEA,OAAO;IACL,GAAGa,KAAK;IACR,GAAGC;EACL,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAG;EAAEJ;AAAW,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}