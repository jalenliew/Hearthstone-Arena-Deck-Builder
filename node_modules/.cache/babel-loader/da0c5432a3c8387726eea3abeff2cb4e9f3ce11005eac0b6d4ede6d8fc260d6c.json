{"ast":null,"code":"'use strict';\n\nconst Hoek = require('@hapi/hoek');\nconst querystring = require('querystring');\nconst debug = require('debug')('simple-oauth2:request-options');\nconst {\n  CredentialsEncoding\n} = require('./credentials-encoding');\nconst JSON_CONTENT_TYPE = 'application/json';\nconst FORM_CONTENT_TYPE = 'application/x-www-form-urlencoded';\nconst authorizationMethodEnum = {\n  HEADER: 'header',\n  BODY: 'body'\n};\nconst bodyFormatEnum = {\n  FORM: 'form',\n  JSON: 'json'\n};\nfunction getDefaultRequestOptions() {\n  return {\n    headers: {}\n  };\n}\nclass RequestOptions {\n  #config = null;\n  #requestOptions = null;\n  constructor(config, params) {\n    this.#config = config;\n    this.#requestOptions = this.createOptions(params);\n  }\n  createOptions(params) {\n    const parameters = {\n      ...params\n    };\n    const requestOptions = getDefaultRequestOptions();\n    if (this.#config.options.authorizationMethod === authorizationMethodEnum.HEADER) {\n      const encoding = new CredentialsEncoding(this.#config.options.credentialsEncodingMode);\n      const credentials = encoding.getAuthorizationHeaderToken(this.#config.client.id, this.#config.client.secret);\n      debug('Using header authentication. Authorization header set to %s', credentials);\n      requestOptions.headers.Authorization = `Basic ${credentials}`;\n    } else {\n      debug('Using body authentication');\n      parameters[this.#config.client.idParamName] = this.#config.client.id;\n      parameters[this.#config.client.secretParamName] = this.#config.client.secret;\n    }\n    if (this.#config.options.bodyFormat === bodyFormatEnum.FORM) {\n      debug('Using form request format');\n      requestOptions.payload = querystring.stringify(parameters);\n      requestOptions.headers['Content-Type'] = FORM_CONTENT_TYPE;\n    } else {\n      debug('Using json request format');\n      requestOptions.payload = parameters;\n      requestOptions.headers['Content-Type'] = JSON_CONTENT_TYPE;\n    }\n    return requestOptions;\n  }\n  toObject(requestOptions = {}) {\n    return Hoek.applyToDefaults(requestOptions, this.#requestOptions);\n  }\n}\nmodule.exports = {\n  RequestOptions,\n  authorizationMethodEnum,\n  bodyFormatEnum\n};","map":{"version":3,"names":["Hoek","require","querystring","debug","CredentialsEncoding","JSON_CONTENT_TYPE","FORM_CONTENT_TYPE","authorizationMethodEnum","HEADER","BODY","bodyFormatEnum","FORM","JSON","getDefaultRequestOptions","headers","RequestOptions","config","requestOptions","constructor","params","createOptions","parameters","options","authorizationMethod","encoding","credentialsEncodingMode","credentials","getAuthorizationHeaderToken","client","id","secret","Authorization","idParamName","secretParamName","bodyFormat","payload","stringify","toObject","applyToDefaults","module","exports"],"sources":["C:/Programming/Hearthstone/Hearthstone-Arena-Deck-Builder/hearthstone-app/node_modules/simple-oauth2/lib/client/request-options.js"],"sourcesContent":["'use strict';\n\nconst Hoek = require('@hapi/hoek');\nconst querystring = require('querystring');\nconst debug = require('debug')('simple-oauth2:request-options');\nconst { CredentialsEncoding } = require('./credentials-encoding');\n\nconst JSON_CONTENT_TYPE = 'application/json';\nconst FORM_CONTENT_TYPE = 'application/x-www-form-urlencoded';\n\nconst authorizationMethodEnum = {\n  HEADER: 'header',\n  BODY: 'body',\n};\n\nconst bodyFormatEnum = {\n  FORM: 'form',\n  JSON: 'json',\n};\n\nfunction getDefaultRequestOptions() {\n  return {\n    headers: {},\n  };\n}\n\nclass RequestOptions {\n  #config = null;\n  #requestOptions = null;\n\n  constructor(config, params) {\n    this.#config = config;\n    this.#requestOptions = this.createOptions(params);\n  }\n\n  createOptions(params) {\n    const parameters = { ...params };\n    const requestOptions = getDefaultRequestOptions();\n\n    if (this.#config.options.authorizationMethod === authorizationMethodEnum.HEADER) {\n      const encoding = new CredentialsEncoding(this.#config.options.credentialsEncodingMode);\n      const credentials = encoding.getAuthorizationHeaderToken(this.#config.client.id, this.#config.client.secret);\n\n      debug('Using header authentication. Authorization header set to %s', credentials);\n\n      requestOptions.headers.Authorization = `Basic ${credentials}`;\n    } else {\n      debug('Using body authentication');\n\n      parameters[this.#config.client.idParamName] = this.#config.client.id;\n      parameters[this.#config.client.secretParamName] = this.#config.client.secret;\n    }\n\n    if (this.#config.options.bodyFormat === bodyFormatEnum.FORM) {\n      debug('Using form request format');\n\n      requestOptions.payload = querystring.stringify(parameters);\n      requestOptions.headers['Content-Type'] = FORM_CONTENT_TYPE;\n    } else {\n      debug('Using json request format');\n\n      requestOptions.payload = parameters;\n      requestOptions.headers['Content-Type'] = JSON_CONTENT_TYPE;\n    }\n\n    return requestOptions;\n  }\n\n  toObject(requestOptions = {}) {\n    return Hoek.applyToDefaults(requestOptions, this.#requestOptions);\n  }\n}\n\nmodule.exports = {\n  RequestOptions,\n  authorizationMethodEnum,\n  bodyFormatEnum,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}