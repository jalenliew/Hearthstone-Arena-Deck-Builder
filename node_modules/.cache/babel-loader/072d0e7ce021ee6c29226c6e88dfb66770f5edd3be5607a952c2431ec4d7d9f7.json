{"ast":null,"code":"'use strict';\n\nconst Assert = require('./assert');\nconst Clone = require('./clone');\nconst Merge = require('./merge');\nconst Reach = require('./reach');\nconst internals = {};\nmodule.exports = function (defaults, source, options = {}) {\n  Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n  Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n  Assert(typeof options === 'object', 'Invalid options: must be an object');\n  if (!source) {\n    // If no source, return null\n    return null;\n  }\n  if (options.shallow) {\n    return internals.applyToDefaultsWithShallow(defaults, source, options);\n  }\n  const copy = Clone(defaults);\n  if (source === true) {\n    // If source is set to true, use defaults\n    return copy;\n  }\n  const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n  return Merge(copy, source, {\n    nullOverride,\n    mergeArrays: false\n  });\n};\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n  const keys = options.shallow;\n  Assert(Array.isArray(keys), 'Invalid keys');\n  const seen = new Map();\n  const merge = source === true ? null : new Set();\n  for (let key of keys) {\n    key = Array.isArray(key) ? key : key.split('.'); // Pre-split optimization\n\n    const ref = Reach(defaults, key);\n    if (ref && typeof ref === 'object') {\n      seen.set(ref, merge && Reach(source, key) || ref);\n    } else if (merge) {\n      merge.add(key);\n    }\n  }\n  const copy = Clone(defaults, {}, seen);\n  if (!merge) {\n    return copy;\n  }\n  for (const key of merge) {\n    internals.reachCopy(copy, source, key);\n  }\n  const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n  return Merge(copy, source, {\n    nullOverride,\n    mergeArrays: false\n  });\n};\ninternals.reachCopy = function (dst, src, path) {\n  for (const segment of path) {\n    if (!(segment in src)) {\n      return;\n    }\n    const val = src[segment];\n    if (typeof val !== 'object' || val === null) {\n      return;\n    }\n    src = val;\n  }\n  const value = src;\n  let ref = dst;\n  for (let i = 0; i < path.length - 1; ++i) {\n    const segment = path[i];\n    if (typeof ref[segment] !== 'object') {\n      ref[segment] = {};\n    }\n    ref = ref[segment];\n  }\n  ref[path[path.length - 1]] = value;\n};","map":{"version":3,"names":["Assert","require","Clone","Merge","Reach","internals","module","exports","defaults","source","options","shallow","applyToDefaultsWithShallow","copy","nullOverride","undefined","mergeArrays","keys","Array","isArray","seen","Map","merge","Set","key","split","ref","set","add","reachCopy","dst","src","path","segment","val","value","i","length"],"sources":["C:/Programming/Hearthstone/Hearthstone-Arena-Deck-Builder/hearthstone-app/node_modules/@hapi/boom/node_modules/@hapi/hoek/lib/applyToDefaults.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('./assert');\nconst Clone = require('./clone');\nconst Merge = require('./merge');\nconst Reach = require('./reach');\n\n\nconst internals = {};\n\n\nmodule.exports = function (defaults, source, options = {}) {\n\n    Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n    Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n    Assert(typeof options === 'object', 'Invalid options: must be an object');\n\n    if (!source) {                                                  // If no source, return null\n        return null;\n    }\n\n    if (options.shallow) {\n        return internals.applyToDefaultsWithShallow(defaults, source, options);\n    }\n\n    const copy = Clone(defaults);\n\n    if (source === true) {                                          // If source is set to true, use defaults\n        return copy;\n    }\n\n    const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n    return Merge(copy, source, { nullOverride, mergeArrays: false });\n};\n\n\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n\n    const keys = options.shallow;\n    Assert(Array.isArray(keys), 'Invalid keys');\n\n    const seen = new Map();\n    const merge = source === true ? null : new Set();\n\n    for (let key of keys) {\n        key = Array.isArray(key) ? key : key.split('.');            // Pre-split optimization\n\n        const ref = Reach(defaults, key);\n        if (ref &&\n            typeof ref === 'object') {\n\n            seen.set(ref, merge && Reach(source, key) || ref);\n        }\n        else if (merge) {\n            merge.add(key);\n        }\n    }\n\n    const copy = Clone(defaults, {}, seen);\n\n    if (!merge) {\n        return copy;\n    }\n\n    for (const key of merge) {\n        internals.reachCopy(copy, source, key);\n    }\n\n    const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n    return Merge(copy, source, { nullOverride, mergeArrays: false });\n};\n\n\ninternals.reachCopy = function (dst, src, path) {\n\n    for (const segment of path) {\n        if (!(segment in src)) {\n            return;\n        }\n\n        const val = src[segment];\n\n        if (typeof val !== 'object' || val === null) {\n            return;\n        }\n\n        src = val;\n    }\n\n    const value = src;\n    let ref = dst;\n    for (let i = 0; i < path.length - 1; ++i) {\n        const segment = path[i];\n        if (typeof ref[segment] !== 'object') {\n            ref[segment] = {};\n        }\n\n        ref = ref[segment];\n    }\n\n    ref[path[path.length - 1]] = value;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}