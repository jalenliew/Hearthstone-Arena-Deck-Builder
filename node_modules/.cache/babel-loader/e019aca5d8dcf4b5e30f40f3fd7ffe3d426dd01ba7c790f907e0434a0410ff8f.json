{"ast":null,"code":"'use strict';\n\nconst Hoek = require('@hapi/hoek');\nconst GrantTypeParams = require('./grant-type-params');\nconst {\n  parseToken\n} = require('./access-token-parser');\nconst ACCESS_TOKEN_PROPERTY_NAME = 'access_token';\nconst REFRESH_TOKEN_PROPERTY_NAME = 'refresh_token';\nmodule.exports = class AccessToken {\n  #config = null;\n  #client = null;\n  constructor(config, client, token) {\n    Hoek.assert(config, 'Cannot create access token without client configuration');\n    Hoek.assert(client, 'Cannot create access token without client instance');\n    Hoek.assert(token, 'Cannot create access token without a token to parse');\n    this.#config = config;\n    this.#client = client;\n    this.token = Object.freeze(parseToken(token));\n  }\n\n  /**\n  * Determines if the current access token has already expired or if it is about to expire\n  *\n  * @param {Number} expirationWindowSeconds Window of time before the actual expiration to refresh the token\n  * @returns {Boolean}\n  */\n  expired(expirationWindowSeconds = 0) {\n    return this.token.expires_at - (Date.now() + expirationWindowSeconds * 1000) <= 0;\n  }\n\n  /**\n  * Refreshes the current access token\n  *\n  * @param {Object} params Optional argument for additional API request params.\n  * @param {String|Array<String>} [params.scope] String or array of strings representing the application privileges\n  * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n  * @returns {Promise<AccessToken>}\n  */\n  async refresh(params = {}, httpOptions = {}) {\n    const refreshParams = {\n      ...params,\n      refresh_token: this.token.refresh_token\n    };\n    const parameters = GrantTypeParams.forGrantType(REFRESH_TOKEN_PROPERTY_NAME, this.#config.options, refreshParams);\n    const response = await this.#client.request(this.#config.auth.refreshPath, parameters.toObject(), httpOptions);\n    return new AccessToken(this.#config, this.#client, response);\n  }\n\n  /**\n  * Revokes either the access or refresh token depending on the {tokenType} value\n  *\n  * @param  {String} tokenType A string containing the type of token to revoke (access_token or refresh_token)\n  * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n  * @returns {Promise}\n  */\n  async revoke(tokenType, httpOptions) {\n    Hoek.assert(tokenType === ACCESS_TOKEN_PROPERTY_NAME || tokenType === REFRESH_TOKEN_PROPERTY_NAME, `Invalid token type. Only ${ACCESS_TOKEN_PROPERTY_NAME} or ${REFRESH_TOKEN_PROPERTY_NAME} are valid values`);\n    const options = {\n      token: this.token[tokenType],\n      token_type_hint: tokenType\n    };\n    return this.#client.request(this.#config.auth.revokePath, options, httpOptions);\n  }\n\n  /**\n   * Revokes both the current access and refresh tokens\n   *\n   * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n   * @returns {Promise}\n  */\n  async revokeAll(httpOptions) {\n    await this.revoke(ACCESS_TOKEN_PROPERTY_NAME, httpOptions);\n    await this.revoke(REFRESH_TOKEN_PROPERTY_NAME, httpOptions);\n  }\n\n  /**\n   * Get the access token's internal JSON representation\n   *\n   * @returns {String}\n   */\n  toJSON() {\n    return this.token;\n  }\n};","map":{"version":3,"names":["Hoek","require","GrantTypeParams","parseToken","ACCESS_TOKEN_PROPERTY_NAME","REFRESH_TOKEN_PROPERTY_NAME","module","exports","AccessToken","config","client","constructor","token","assert","Object","freeze","expired","expirationWindowSeconds","expires_at","Date","now","refresh","params","httpOptions","refreshParams","refresh_token","parameters","forGrantType","options","response","request","auth","refreshPath","toObject","revoke","tokenType","token_type_hint","revokePath","revokeAll","toJSON"],"sources":["C:/Programming/Hearthstone/Hearthstone-Arena-Deck-Builder/hearthstone-app/node_modules/simple-oauth2/lib/access-token.js"],"sourcesContent":["'use strict';\n\nconst Hoek = require('@hapi/hoek');\nconst GrantTypeParams = require('./grant-type-params');\nconst { parseToken } = require('./access-token-parser');\n\nconst ACCESS_TOKEN_PROPERTY_NAME = 'access_token';\nconst REFRESH_TOKEN_PROPERTY_NAME = 'refresh_token';\n\nmodule.exports = class AccessToken {\n  #config = null;\n  #client = null;\n\n  constructor(config, client, token) {\n    Hoek.assert(config, 'Cannot create access token without client configuration');\n    Hoek.assert(client, 'Cannot create access token without client instance');\n    Hoek.assert(token, 'Cannot create access token without a token to parse');\n\n    this.#config = config;\n    this.#client = client;\n    this.token = Object.freeze(parseToken(token));\n  }\n\n  /**\n  * Determines if the current access token has already expired or if it is about to expire\n  *\n  * @param {Number} expirationWindowSeconds Window of time before the actual expiration to refresh the token\n  * @returns {Boolean}\n  */\n  expired(expirationWindowSeconds = 0) {\n    return this.token.expires_at - (Date.now() + expirationWindowSeconds * 1000) <= 0;\n  }\n\n  /**\n  * Refreshes the current access token\n  *\n  * @param {Object} params Optional argument for additional API request params.\n  * @param {String|Array<String>} [params.scope] String or array of strings representing the application privileges\n  * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n  * @returns {Promise<AccessToken>}\n  */\n  async refresh(params = {}, httpOptions = {}) {\n    const refreshParams = {\n      ...params,\n      refresh_token: this.token.refresh_token,\n    };\n\n    const parameters = GrantTypeParams.forGrantType(REFRESH_TOKEN_PROPERTY_NAME, this.#config.options, refreshParams);\n    const response = await this.#client.request(this.#config.auth.refreshPath, parameters.toObject(), httpOptions);\n\n    return new AccessToken(this.#config, this.#client, response);\n  }\n\n  /**\n  * Revokes either the access or refresh token depending on the {tokenType} value\n  *\n  * @param  {String} tokenType A string containing the type of token to revoke (access_token or refresh_token)\n  * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n  * @returns {Promise}\n  */\n  async revoke(tokenType, httpOptions) {\n    Hoek.assert(\n      tokenType === ACCESS_TOKEN_PROPERTY_NAME || tokenType === REFRESH_TOKEN_PROPERTY_NAME,\n      `Invalid token type. Only ${ACCESS_TOKEN_PROPERTY_NAME} or ${REFRESH_TOKEN_PROPERTY_NAME} are valid values`,\n    );\n\n    const options = {\n      token: this.token[tokenType],\n      token_type_hint: tokenType,\n    };\n\n    return this.#client.request(this.#config.auth.revokePath, options, httpOptions);\n  }\n\n  /**\n   * Revokes both the current access and refresh tokens\n   *\n   * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n   * @returns {Promise}\n  */\n  async revokeAll(httpOptions) {\n    await this.revoke(ACCESS_TOKEN_PROPERTY_NAME, httpOptions);\n    await this.revoke(REFRESH_TOKEN_PROPERTY_NAME, httpOptions);\n  }\n\n  /**\n   * Get the access token's internal JSON representation\n   *\n   * @returns {String}\n   */\n  toJSON() {\n    return this.token;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}