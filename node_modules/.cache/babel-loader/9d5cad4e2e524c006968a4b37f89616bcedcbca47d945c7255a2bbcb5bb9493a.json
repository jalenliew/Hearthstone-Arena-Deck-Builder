{"ast":null,"code":"'use strict';\n\nconst Assert = require('./assert');\nconst internals = {};\nmodule.exports = function (obj, chain, options) {\n  if (chain === false || chain === null || chain === undefined) {\n    return obj;\n  }\n  options = options || {};\n  if (typeof options === 'string') {\n    options = {\n      separator: options\n    };\n  }\n  const isChainArray = Array.isArray(chain);\n  Assert(!isChainArray || !options.separator, 'Separator option is not valid for array-based chain');\n  const path = isChainArray ? chain : chain.split(options.separator || '.');\n  let ref = obj;\n  for (let i = 0; i < path.length; ++i) {\n    let key = path[i];\n    const type = options.iterables && internals.iterables(ref);\n    if (Array.isArray(ref) || type === 'set') {\n      const number = Number(key);\n      if (Number.isInteger(number)) {\n        key = number < 0 ? ref.length + number : number;\n      }\n    }\n    if (!ref || typeof ref === 'function' && options.functions === false ||\n    // Defaults to true\n    !type && ref[key] === undefined) {\n      Assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);\n      Assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);\n      ref = options.default;\n      break;\n    }\n    if (!type) {\n      ref = ref[key];\n    } else if (type === 'set') {\n      ref = [...ref][key];\n    } else {\n      // type === 'map'\n      ref = ref.get(key);\n    }\n  }\n  return ref;\n};\ninternals.iterables = function (ref) {\n  if (ref instanceof Set) {\n    return 'set';\n  }\n  if (ref instanceof Map) {\n    return 'map';\n  }\n};","map":{"version":3,"names":["Assert","require","internals","module","exports","obj","chain","options","undefined","separator","isChainArray","Array","isArray","path","split","ref","i","length","key","type","iterables","number","Number","isInteger","functions","strict","default","get","Set","Map"],"sources":["C:/Programming/Hearthstone/Hearthstone-Arena-Deck-Builder/hearthstone-app/node_modules/@hapi/hoek/lib/reach.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('./assert');\n\n\nconst internals = {};\n\n\nmodule.exports = function (obj, chain, options) {\n\n    if (chain === false ||\n        chain === null ||\n        chain === undefined) {\n\n        return obj;\n    }\n\n    options = options || {};\n    if (typeof options === 'string') {\n        options = { separator: options };\n    }\n\n    const isChainArray = Array.isArray(chain);\n\n    Assert(!isChainArray || !options.separator, 'Separator option is not valid for array-based chain');\n\n    const path = isChainArray ? chain : chain.split(options.separator || '.');\n    let ref = obj;\n    for (let i = 0; i < path.length; ++i) {\n        let key = path[i];\n        const type = options.iterables && internals.iterables(ref);\n\n        if (Array.isArray(ref) ||\n            type === 'set') {\n\n            const number = Number(key);\n            if (Number.isInteger(number)) {\n                key = number < 0 ? ref.length + number : number;\n            }\n        }\n\n        if (!ref ||\n            typeof ref === 'function' && options.functions === false ||         // Defaults to true\n            !type && ref[key] === undefined) {\n\n            Assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);\n            Assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);\n            ref = options.default;\n            break;\n        }\n\n        if (!type) {\n            ref = ref[key];\n        }\n        else if (type === 'set') {\n            ref = [...ref][key];\n        }\n        else {  // type === 'map'\n            ref = ref.get(key);\n        }\n    }\n\n    return ref;\n};\n\n\ninternals.iterables = function (ref) {\n\n    if (ref instanceof Set) {\n        return 'set';\n    }\n\n    if (ref instanceof Map) {\n        return 'map';\n    }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAGlC,MAAMC,SAAS,GAAG,CAAC,CAAC;AAGpBC,MAAM,CAACC,OAAO,GAAG,UAAUC,GAAG,EAAEC,KAAK,EAAEC,OAAO,EAAE;EAE5C,IAAID,KAAK,KAAK,KAAK,IACfA,KAAK,KAAK,IAAI,IACdA,KAAK,KAAKE,SAAS,EAAE;IAErB,OAAOH,GAAG;EACd;EAEAE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC7BA,OAAO,GAAG;MAAEE,SAAS,EAAEF;IAAQ,CAAC;EACpC;EAEA,MAAMG,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC;EAEzCN,MAAM,CAAC,CAACU,YAAY,IAAI,CAACH,OAAO,CAACE,SAAS,EAAE,qDAAqD,CAAC;EAElG,MAAMI,IAAI,GAAGH,YAAY,GAAGJ,KAAK,GAAGA,KAAK,CAACQ,KAAK,CAACP,OAAO,CAACE,SAAS,IAAI,GAAG,CAAC;EACzE,IAAIM,GAAG,GAAGV,GAAG;EACb,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;IAClC,IAAIE,GAAG,GAAGL,IAAI,CAACG,CAAC,CAAC;IACjB,MAAMG,IAAI,GAAGZ,OAAO,CAACa,SAAS,IAAIlB,SAAS,CAACkB,SAAS,CAACL,GAAG,CAAC;IAE1D,IAAIJ,KAAK,CAACC,OAAO,CAACG,GAAG,CAAC,IAClBI,IAAI,KAAK,KAAK,EAAE;MAEhB,MAAME,MAAM,GAAGC,MAAM,CAACJ,GAAG,CAAC;MAC1B,IAAII,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,EAAE;QAC1BH,GAAG,GAAGG,MAAM,GAAG,CAAC,GAAGN,GAAG,CAACE,MAAM,GAAGI,MAAM,GAAGA,MAAM;MACnD;IACJ;IAEA,IAAI,CAACN,GAAG,IACJ,OAAOA,GAAG,KAAK,UAAU,IAAIR,OAAO,CAACiB,SAAS,KAAK,KAAK;IAAY;IACpE,CAACL,IAAI,IAAIJ,GAAG,CAACG,GAAG,CAAC,KAAKV,SAAS,EAAE;MAEjCR,MAAM,CAAC,CAACO,OAAO,CAACkB,MAAM,IAAIT,CAAC,GAAG,CAAC,KAAKH,IAAI,CAACI,MAAM,EAAE,iBAAiB,EAAEC,GAAG,EAAE,gBAAgB,EAAEZ,KAAK,CAAC;MACjGN,MAAM,CAAC,OAAOe,GAAG,KAAK,QAAQ,IAAIR,OAAO,CAACiB,SAAS,KAAK,IAAI,IAAI,OAAOT,GAAG,KAAK,UAAU,EAAE,iBAAiB,EAAEG,GAAG,EAAE,gBAAgB,EAAEZ,KAAK,CAAC;MAC3IS,GAAG,GAAGR,OAAO,CAACmB,OAAO;MACrB;IACJ;IAEA,IAAI,CAACP,IAAI,EAAE;MACPJ,GAAG,GAAGA,GAAG,CAACG,GAAG,CAAC;IAClB,CAAC,MACI,IAAIC,IAAI,KAAK,KAAK,EAAE;MACrBJ,GAAG,GAAG,CAAC,GAAGA,GAAG,CAAC,CAACG,GAAG,CAAC;IACvB,CAAC,MACI;MAAG;MACJH,GAAG,GAAGA,GAAG,CAACY,GAAG,CAACT,GAAG,CAAC;IACtB;EACJ;EAEA,OAAOH,GAAG;AACd,CAAC;AAGDb,SAAS,CAACkB,SAAS,GAAG,UAAUL,GAAG,EAAE;EAEjC,IAAIA,GAAG,YAAYa,GAAG,EAAE;IACpB,OAAO,KAAK;EAChB;EAEA,IAAIb,GAAG,YAAYc,GAAG,EAAE;IACpB,OAAO,KAAK;EAChB;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}