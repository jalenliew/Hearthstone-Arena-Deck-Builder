{"ast":null,"code":"'use strict';\n\nconst {\n  URL\n} = require('url');\nconst AccessToken = require('./access-token');\nconst GrantTypeParams = require('./grant-type-params');\nmodule.exports = class AuthorizationCode {\n  #config = null;\n  #client = null;\n  constructor(config, client) {\n    this.#config = config;\n    this.#client = client;\n  }\n\n  /**\n   * Get a valid redirect URL used to redirect users to an authorization page\n   *\n   * @param {Object} params\n   * @param {String} params.redirectURI String representing the registered application URI where the user is redirected after authentication\n   * @param {String|Array<String>} params.scope String or array of strings representing the application privileges\n   * @param {String} params.state String representing an opaque value used by the client to main the state between the request and the callback\n   *\n   * @return {String} the absolute authorization url\n   */\n  authorizeURL(params = {}) {\n    const baseParams = {\n      response_type: 'code',\n      [this.#config.client.idParamName]: this.#config.client.id\n    };\n    const url = new URL(this.#config.auth.authorizePath, this.#config.auth.authorizeHost);\n    const parameters = new GrantTypeParams(this.#config.options, baseParams, params);\n    Object.entries(parameters.toObject()).forEach(([parameterName, value]) => url.searchParams.set(parameterName, value));\n    return url.toString();\n  }\n\n  /**\n   * Requests and returns an access token from the authorization server\n   *\n   * @param {String} params.code Authorization code (from previous step)\n   * @param {String} params.redirectURI String representing the registered application URI where the user is redirected after authentication\n   * @param {String|Array<String>} [params.scope] String or array of strings representing the application privileges\n   * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n   * @return {Promise<AccessToken>}\n   */\n  async getToken(params, httpOptions) {\n    const parameters = GrantTypeParams.forGrantType('authorization_code', this.#config.options, params);\n    const response = await this.#client.request(this.#config.auth.tokenPath, parameters.toObject(), httpOptions);\n    return this.createToken(response);\n  }\n\n  /**\n   * Creates a new access token instance from a plain object\n   *\n   * @param {Object} token Plain object representation of an access token\n   * @returns {AccessToken}\n   */\n  createToken(token) {\n    return new AccessToken(this.#config, this.#client, token);\n  }\n};","map":{"version":3,"names":["URL","require","AccessToken","GrantTypeParams","module","exports","AuthorizationCode","config","client","constructor","authorizeURL","params","baseParams","response_type","idParamName","id","url","auth","authorizePath","authorizeHost","parameters","options","Object","entries","toObject","forEach","parameterName","value","searchParams","set","toString","getToken","httpOptions","forGrantType","response","request","tokenPath","createToken","token"],"sources":["C:/Programming/Hearthstone/Hearthstone-Arena-Deck-Builder/hearthstone-app/node_modules/simple-oauth2/lib/authorization-code-grant-type.js"],"sourcesContent":["'use strict';\n\nconst { URL } = require('url');\nconst AccessToken = require('./access-token');\nconst GrantTypeParams = require('./grant-type-params');\n\nmodule.exports = class AuthorizationCode {\n  #config = null;\n  #client = null;\n\n  constructor(config, client) {\n    this.#config = config;\n    this.#client = client;\n  }\n\n  /**\n   * Get a valid redirect URL used to redirect users to an authorization page\n   *\n   * @param {Object} params\n   * @param {String} params.redirectURI String representing the registered application URI where the user is redirected after authentication\n   * @param {String|Array<String>} params.scope String or array of strings representing the application privileges\n   * @param {String} params.state String representing an opaque value used by the client to main the state between the request and the callback\n   *\n   * @return {String} the absolute authorization url\n   */\n  authorizeURL(params = {}) {\n    const baseParams = {\n      response_type: 'code',\n      [this.#config.client.idParamName]: this.#config.client.id,\n    };\n\n    const url = new URL(this.#config.auth.authorizePath, this.#config.auth.authorizeHost);\n    const parameters = new GrantTypeParams(this.#config.options, baseParams, params);\n\n    Object\n      .entries(parameters.toObject())\n      .forEach(([parameterName, value]) => url.searchParams.set(parameterName, value));\n\n    return url.toString();\n  }\n\n  /**\n   * Requests and returns an access token from the authorization server\n   *\n   * @param {String} params.code Authorization code (from previous step)\n   * @param {String} params.redirectURI String representing the registered application URI where the user is redirected after authentication\n   * @param {String|Array<String>} [params.scope] String or array of strings representing the application privileges\n   * @param {Object} [httpOptions] Optional http options passed through the underlying http library\n   * @return {Promise<AccessToken>}\n   */\n  async getToken(params, httpOptions) {\n    const parameters = GrantTypeParams.forGrantType('authorization_code', this.#config.options, params);\n    const response = await this.#client.request(this.#config.auth.tokenPath, parameters.toObject(), httpOptions);\n\n    return this.createToken(response);\n  }\n\n  /**\n   * Creates a new access token instance from a plain object\n   *\n   * @param {Object} token Plain object representation of an access token\n   * @returns {AccessToken}\n   */\n  createToken(token) {\n    return new AccessToken(this.#config, this.#client, token);\n  }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC9B,MAAMC,WAAW,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC7C,MAAME,eAAe,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAEtDG,MAAM,CAACC,OAAO,GAAG,MAAMC,iBAAiB,CAAC;EACvC,CAACC,MAAM,GAAG,IAAI;EACd,CAACC,MAAM,GAAG,IAAI;EAEdC,WAAWA,CAACF,MAAM,EAAEC,MAAM,EAAE;IAC1B,IAAI,CAAC,CAACD,MAAM,GAAGA,MAAM;IACrB,IAAI,CAAC,CAACC,MAAM,GAAGA,MAAM;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,YAAYA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACxB,MAAMC,UAAU,GAAG;MACjBC,aAAa,EAAE,MAAM;MACrB,CAAC,IAAI,CAAC,CAACN,MAAM,CAACC,MAAM,CAACM,WAAW,GAAG,IAAI,CAAC,CAACP,MAAM,CAACC,MAAM,CAACO;IACzD,CAAC;IAED,MAAMC,GAAG,GAAG,IAAIhB,GAAG,CAAC,IAAI,CAAC,CAACO,MAAM,CAACU,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC,CAACX,MAAM,CAACU,IAAI,CAACE,aAAa,CAAC;IACrF,MAAMC,UAAU,GAAG,IAAIjB,eAAe,CAAC,IAAI,CAAC,CAACI,MAAM,CAACc,OAAO,EAAET,UAAU,EAAED,MAAM,CAAC;IAEhFW,MAAM,CACHC,OAAO,CAACH,UAAU,CAACI,QAAQ,CAAC,CAAC,CAAC,CAC9BC,OAAO,CAAC,CAAC,CAACC,aAAa,EAAEC,KAAK,CAAC,KAAKX,GAAG,CAACY,YAAY,CAACC,GAAG,CAACH,aAAa,EAAEC,KAAK,CAAC,CAAC;IAElF,OAAOX,GAAG,CAACc,QAAQ,CAAC,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQA,CAACpB,MAAM,EAAEqB,WAAW,EAAE;IAClC,MAAMZ,UAAU,GAAGjB,eAAe,CAAC8B,YAAY,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC1B,MAAM,CAACc,OAAO,EAAEV,MAAM,CAAC;IACnG,MAAMuB,QAAQ,GAAG,MAAM,IAAI,CAAC,CAAC1B,MAAM,CAAC2B,OAAO,CAAC,IAAI,CAAC,CAAC5B,MAAM,CAACU,IAAI,CAACmB,SAAS,EAAEhB,UAAU,CAACI,QAAQ,CAAC,CAAC,EAAEQ,WAAW,CAAC;IAE5G,OAAO,IAAI,CAACK,WAAW,CAACH,QAAQ,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEG,WAAWA,CAACC,KAAK,EAAE;IACjB,OAAO,IAAIpC,WAAW,CAAC,IAAI,CAAC,CAACK,MAAM,EAAE,IAAI,CAAC,CAACC,MAAM,EAAE8B,KAAK,CAAC;EAC3D;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}